generator client {
  provider = "prisma-client-js"
  output = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email            String         @unique
  password         String
  firstName        String
  lastName         String
  role             UserRole       @default(MEMBER)
  isEmailVerified  Boolean        @default(false)
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  borrowedBooks    BorrowedBook[]
  transactions     Transaction[]
}

model Book {
  id            String         @id @default(uuid())
  isbn          String         @unique
  title         String
  description   String?
  totalCopies   Int           @default(1)
  availableCopies Int         @default(1)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  borrowedBooks BorrowedBook[]
  categories    CategoriesOnBooks[]
  authors       AuthorsOnBooks[]
}

model Author {
  id        String           @id @default(uuid())
  name      String
  bio       String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  books     AuthorsOnBooks[]
}

model Category {
  id        String             @id @default(uuid())
  name      String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  books     CategoriesOnBooks[]
}

model BorrowedBook {
  id         String     @id @default(uuid())
  userId     String
  bookId     String
  borrowedAt DateTime   @default(now())
  dueDate    DateTime
  returnedAt DateTime?
  user       User       @relation(fields: [userId], references: [id])
  book       Book       @relation(fields: [bookId], references: [id])
  fine       Transaction?
}

model Transaction {
  id             String       @id @default(uuid())
  userId         String
  borrowedBookId String      @unique
  amount         Float
  status         PaymentStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id])
  borrowedBook   BorrowedBook @relation(fields: [borrowedBookId], references: [id])
}

model AuthorsOnBooks {
  bookId    String
  authorId  String
  book      Book    @relation(fields: [bookId], references: [id])
  author    Author  @relation(fields: [authorId], references: [id])

  @@id([bookId, authorId])
}

model CategoriesOnBooks {
  bookId     String
  categoryId String
  book       Book     @relation(fields: [bookId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([bookId, categoryId])
}

enum UserRole {
  ADMIN
  MEMBER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
} 