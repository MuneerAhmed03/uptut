openapi: 3.0.0
info:
  title: Library Management System API
  description: API documentation for the Library Management System
  version: 1.0.0
  contact:
    name: Library Management System Support
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.library.com
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        role:
          type: string
          enum: [ADMIN, MEMBER]
        isEmailVerified:
          type: boolean
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

    Book:
      type: object
      properties:
        id:
          type: string
          format: uuid
        isbn:
          type: string
        title:
          type: string
        description:
          type: string
        totalCopies:
          type: integer
        availableCopies:
          type: integer
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'

    Author:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        bio:
          type: string

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    BorrowedBook:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        bookId:
          type: string
          format: uuid
        borrowedAt:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
        returnedAt:
          type: string
          format: date-time

    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        borrowedBookId:
          type: string
          format: uuid
        amount:
          type: number
          format: float
        status:
          type: string
          enum: [PENDING, PAID, FAILED]

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials

  /books/search:
    get:
      tags:
        - Books
      summary: Search books
      parameters:
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: List of books matching the search criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer

  /books/{id}:
    get:
      tags:
        - Books
      summary: Get book details
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found

    put:
      tags:
        - Books
      summary: Update book details
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Book updated successfully
        '403':
          description: Unauthorized
        '404':
          description: Book not found

    delete:
      tags:
        - Books
      summary: Delete book
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Book deleted successfully
        '403':
          description: Unauthorized
        '404':
          description: Book not found

  /borrow:
    post:
      tags:
        - Borrowing
      summary: Borrow a book
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Book borrowed successfully
        '400':
          description: Book not available
        '403':
          description: Unauthorized

  /borrow/{id}/return:
    post:
      tags:
        - Borrowing
      summary: Return a borrowed book
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Book returned successfully
        '403':
          description: Unauthorized
        '404':
          description: Borrowed book not found

  /borrow/history:
    get:
      tags:
        - Borrowing
      summary: Get borrowing history
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: List of borrowed books
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BorrowedBook'
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer

  /payment/fines:
    get:
      tags:
        - Payments
      summary: Get user fines
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of unpaid fines
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'

  /payment/fines/{id}/pay:
    post:
      tags:
        - Payments
      summary: Pay a fine
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Fine paid successfully
        '400':
          description: Payment failed
        '404':
          description: Fine not found

  /analytics/most-borrowed:
    get:
      tags:
        - Analytics
      summary: Get most borrowed books
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of most borrowed books
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    book:
                      $ref: '#/components/schemas/Book'
                    borrowCount:
                      type: integer

  /analytics/monthly-report:
    get:
      tags:
        - Analytics
      summary: Get monthly borrowing report
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Monthly borrowing statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalBorrows:
                    type: integer
                  totalReturns:
                    type: integer
                  totalFines:
                    type: number
                    format: float

  /user/profile:
    get:
      tags:
        - User
      summary: Get user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    patch:
      tags:
        - User
      summary: Update user profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
        '400':
          description: Invalid input 